# Tkinter-Project
Scientific_Calculator
#SCIENTIFIC CALCULATOR
#check1
from tkinter import*
from PIL import Image,ImageTk
from pyttsx3 import*
import math
print(math.ceil(9/5))
print(math.sin(0))
print(eval("4+5"))
class Scientific_Calculator():
   def __init__(self):
      self.calc=Tk()
      self.calc.geometry("1500x1000")
      self.calc["bg"]="#c7eef0"
      self.exp=0
      self.checkbas=0
      self.checkdeg=0
      self.checklog=0
      self.checkcom=0 
      self.calcvalues=[]
      
      global load,rend
      load=Image.open('C:/Users/udaya/OneDrive/Pictures/Saved Pictures/matrix.jpg')
      rend=ImageTk.PhotoImage(load.resize((1600,850)))
      img=Label(self.calc,image=rend)
      img.place(x=0,y=0)
      main=Frame(self.calc,height=600,width=1100,bg="#032906").place(x=200,y=120)
   
   def f(self,x):
      print(type(x))
      print(eval(x))
      return(eval(x))
   
# 1 page                                                                                                                1 str      
   def basicstart(self):
           if(self.checkbas==0):
             self.basic=Frame(self.calc,height=850,width=1555,bg="#eaf2fa")
             self.checkbas+=1
             scien.basic1()
   def basic1(self):
       pr=StringVar()
       pr1=StringVar()
       global basic;
       basic=self.basic;
       border=Frame(basic,height=493,width=460,bg="#5162ff") ##44d550  #1ebf03
       Entry1=Frame(basic,height=473,width=420,bg="#2e9dff")
       Number=Frame(basic,height=430,width=350,bg="#7dbaf0")
       T1=Entry(basic,text=pr,font=("Helvetica",18,"bold","italic"),bd=4,justify="left")
       T2=Entry(basic,text=pr1,font=("Helvetica",18,"bold","italic"),bd=4,justify="center")
       self.sb=Scrollbar(basic)
       self.storage=Listbox(basic,yscrollcommand=self.sb.set,font=("Helvetica",18,"bold","italic"),height=17,width=48)
       [self.storage.insert(END,i) for i in self.calcvalues]
       
       
       def n1():
                a=pr.get()
                b=str(a)+"1"
                pr.set(b)
       def n2():
               a=pr.get()
               b=str(a)+"2"
               pr.set(b)
       def n3():
              a=pr.get()
              b=str(a)+"3"
              pr.set(b)
       def n4():
              a=pr.get()
              b=str(a)+"4"
              pr.set(b)
       def n5():
              a=pr.get()
              b=str(a)+"5"
              pr.set(b)
       def n6():
              a=pr.get()
              b=str(a)+"6"
              pr.set(b)
       def n7():
              a=pr.get()
              b=str(a)+"7"
              pr.set(b)
       def n8():
              a=pr.get()
              b=str(a)+"8"
              pr.set(b)
       def n9():
              a=pr.get()
              b=str(a)+"9"
              pr.set(b)
       def n0():
              a=pr.get()
              b=str(a)+"0"
              pr.set(b)  
       def nc():
              a=pr.get()
              b=str(a)+","
              pr.set(b)
       def nf():
              a=pr.get()
              b=str(a)+"."
              pr.set(b)
  
       def bck1():
           a=pr.get()
           b=a[0:-1]
           pr.set(b)

       def del1():
          pr.set("")

       def expr():
           print("a")
           if(self.exp==0):
               self.exp+=1
               print("Expr Activated")
               exp1["bg"]="red"
               eval1["state"]=NORMAL
               eval1["bg"]="#fff9a8"
           elif(self.exp==1):
               self.exp-=1
               print("Expr deactivated")
               exp1["bg"]="#fff9a8"
               eval1["state"]=DISABLED
               eval1["bg"]="white"
       def eval():
         try:
          a=pr.get()
          b=scien.f(a)
          pr1.set(b)
         except Exception as e:
            print(e)
        
       def store():
            a=pr1.get()
            self.calcvalues.append(a)
            self.storage.insert(END,a) 
            
       def plus():
         try: 
           if(self.exp==0):
               b=0
               a=pr.get().split(',')
               for i in a:
                  b+=float(i)
               pr1.set(b)
           else:
               a=pr.get()
               print(a)
               b=a+"+"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def rbrack():
           a=pr.get()
           b=a+"("
           pr.set(b)
       def lbrack():
           a=pr.get()
           b=a+")"
           pr.set(b)
       def pow1():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=float(a[0])**float(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"^"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def divid():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=float(a[0])/float(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"/"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def mult():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=float(a[0])*float(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"*"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def minus():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=float(a[0])-float(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"+"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def ceil():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=float(a[0])/float(a[1])
               b=math.ceil(b)
               pr1.set(b)
           else:
               a=pr.get()
               b="math.ceil(%s)"%a
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def floor():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=float(a[0])//float(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"//"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       
       
       bck1=Button(basic,text="Bck Sp",command=bck1,font=("Times New Roman",14,"bold","italic"),bg="#72c7ff",bd=4)
       delete=Button(Number,text="Del",command=del1,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       exp1=Button(Number,text="Expr",command=expr,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       eval1=Button(Number,text="Eval",command=eval,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="white",bd=4,state=DISABLED)      
       stor=Button(basic,text="Stor",command=store,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       
       but1=Button(Number,text=1,command=n1,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but2=Button(Number,text=2,command=n2,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       but3=Button(Number,text=3,command=n3,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but4=Button(Number,text=4,command=n4,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but5=Button(Number,text=5,command=n5,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but6=Button(Number,text=6,command=n6,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but7=Button(Number,text=7,command=n7,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but8=Button(Number,text=8,command=n8,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but9=Button(Number,text=9,command=n9,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but0=Button(Number,text=0,command=n0,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butc=Button(Number,text=",",command=nc,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butf=Button(Number,text=".",command=nf,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
    
       butolb=Button(Entry1,text='(',command=rbrack,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butorb=Button(Entry1,text=')',command=lbrack,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butopw=Button(Entry1,text='^',command=pow1,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butodiv=Button(Entry1,text='/',command=divid,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butofldiv=Button(Entry1,text='//',command=floor,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butoce=Button(Entry1,text="c",command=ceil,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butomult=Button(Entry1,text='*',command=mult,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butopl=Button(Entry1,text='+',command=plus,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butosub=Button(Entry1,text='-',command=minus,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
    
       basic.place(x=25,y=27)
    
       T1.place(x=120,y=90,height=40,width=400)
       T2.place(x=800,y=90,height=40,width=570)
       bck1.place(x=510,y=90,height=40,width=70)
       delete.place(x=140,y=350)
       exp1.place(x=40,y=350)
       eval1.place(x=240,y=350)
       stor.place(x=1370,y=87)
    
       but1.place(x=40,y=30)
       but2.place(x=140,y=30)
       but3.place(x=240,y=30)
       but4.place(x=40,y=110)
       but5.place(x=140,y=110)
       but6.place(x=240,y=110)
       but7.place(x=40,y=190)
       but8.place(x=140,y=190)
       but9.place(x=240,y=190)
       but0.place(x=140,y=270)
       butc.place(x=40,y=270)
       butf.place(x=240,y=270)
                 
       butolb.place(x=40,y=430)
       butorb.place(x=140,y=430)
       butopw.place(x=350,y=430)
       butodiv.place(x=350,y=270)
       butofldiv.place(x=350,y=350)
       butoce.place(x=240,y=430)
       butomult.place(x=350,y=190)
       butopl.place(x=350,y=30)
       butosub.place(x=350,y=110)

       Entry1.place(x=140,y=130)
       Number.place(x=140,y=130)
       border.place(x=120,y=130)

       self.sb.place(x=1427,y=130,height=500)
       self.storage.place(x=800,y=130)
       self.sb.config(command=self.storage.yview)                   # 1 end




# 2 page                                                                                         2 str 
   def degreestart(self):
           if(self.checkdeg==0):
             self.degree=Frame(self.calc,height=850,width=1495,bg="#eaf2fa")
             self.checkdeg+=1
             scien.Degree()         
   def Degree(self):
       pr=StringVar()
       pr1=StringVar()
       global degree;
       degree=self.degree;
       border=Frame(degree,height=493,width=460,bg="#5162ff")
       Entry1=Frame(degree,height=473,width=420,bg="#2e9dff")
       Number=Frame(degree,height=430,width=350,bg="#7dbaf0")
       deg=Frame(degree,height=430,width=350,bg="#7dbaf0")
       T1=Entry(degree,text=pr,font=("Helvetica",18,"bold","italic"),bd=4,justify="left")
       T2=Entry(degree,text=pr1,font=("Times new roman",18,"bold","italic"),bd=4,justify="center")
       self.sb=Scrollbar(degree)
       self.storage=Listbox(degree,yscrollcommand=self.sb.set,font=("Helvetica",18,"bold","italic"),height=17,width=26)
       [self.storage.insert(END,i) for i in self.calcvalues]
       
       
       def n1():
                a=pr.get()
                b=str(a)+"1"
                pr.set(b)
       def n2():
               a=pr.get()
               b=str(a)+"2"
               pr.set(b)
       def n3():
              a=pr.get()
              b=str(a)+"3"
              pr.set(b)
       def n4():
              a=pr.get()
              b=str(a)+"4"
              pr.set(b)
       def n5():
              a=pr.get()
              b=str(a)+"5"
              pr.set(b)
       def n6():
              a=pr.get()
              b=str(a)+"6"
              pr.set(b)
       def n7():
              a=pr.get()
              b=str(a)+"7"
              pr.set(b)
       def n8():
              a=pr.get()
              b=str(a)+"8"
              pr.set(b)
       def n9():
              a=pr.get()
              b=str(a)+"9"
              pr.set(b)
       def n0():
              a=pr.get()
              b=str(a)+"0"
              pr.set(b)  
       def nc():
              a=pr.get()
              b=str(a)+","
              pr.set(b)
       def nf():
              a=pr.get()
              b=str(a)+"."
              pr.set(b)
  
       def bck1():
           a=pr.get()
           b=a[0:-1]
           pr.set(b)

       def del1():
          pr.set("")

       def expr():
           print("a")
           if(self.exp==0):
               self.exp+=1
               print("Expr Activated")
               exp1["bg"]="red"
               eval1["state"]=NORMAL
               eval1["bg"]="#fff9a8"
           elif(self.exp==1):
               self.exp-=1
               print("Expr deactivated")
               exp1["bg"]="#fff9a8"
               eval1["state"]=DISABLED
               eval1["bg"]="white"
       def eval():
         try:
          a=pr.get()
          b=scien.f(a)
          pr1.set(b)
         except Exception as e:
            print(e)
        
       def store():
            a=pr1.get()
            self.calcvalues.append(a)
            self.storage.insert(END,a) 
            
       def plus():
         try: 
           if(self.exp==0):
               b=0
               a=pr.get().split(',')
               for i in a:
                  b+=int(i)
               pr1.set(b)
           else:
               a=pr.get()
               print(a)
               b=a+"+"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def rbrack():
           a=pr.get()
           b=a+"("
           pr.set(b)
       def lbrack():
           a=pr.get()
           b=a+")"
           pr.set(b)
       def pow1():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=int(a[0])**int(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"^"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def divid():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=int(a[0])/int(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"/"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def mult():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=int(a[0])*int(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"*"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def minus():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=int(a[0])-int(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"+"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def ceil():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=float(a[0])/float(a[1])
               b=math.ceil(b)
               pr1.set(b)
           else:
               a=pr.get()
               b="math.ceil(%s)"%a
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def floor():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=int(a[0])//int(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"//"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def sin():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               print(math.radians(int(a[0])))
               b=math.sin(math.radians(int(a[0])))
               pr1.set(b)
           else:
               a=pr.get()
               b="sin(%d)"%a
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def cos():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=math.cos(math.radians(int(a[0])))
               pr1.set(b)
           else:
               a=pr.get()
               b="sin(%d)"%a
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def tan():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=math.tan(math.radians(int(a[0])))
               pr1.set(b)
           else:
               a=pr.get()
               b="sin(%d)"%a
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def sec():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=1/math.cos(math.radians(int(a[0])))
               pr1.set(b)
           else:
               a=pr.get()
               b="sin(%d)"%a
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def cosec():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=1/math.sin(math.radians(int(a[0])))
               pr1.set(b)
           else:
               a=pr.get()
               b="sin(%d)"%a
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def cot():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=1/math.tan(math.radians(int(a[0])))
               pr1.set(b)
           else:
               a=pr.get()
               b="sin(%d)"%a
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def sin1():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=math.asin(math.radians(int(a[0])))
               pr1.set(b)
           else:
               a=pr.get()
               b="sin(%d)"%a
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def cos1():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=math.acos(math.radians(int(a[0])))
               pr1.set(b)
           else:
               a=pr.get()
               b="sin(%d)"%a
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def tan1():
        try:
           if(self.exp==0):
               a=pr.get().split(',')
               b=math.atan(math.radians(int(a[0])))
               pr1.set(b)
           else:
               a=pr.get()
               b="sin(%d)"%a
               pr.set(b)
        except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def degtorad():
        try:
           if(self.exp==0):
               a=pr.get().split(',')
               b=math.radians(int(a[0]))
               pr1.set(b)
           else:
               a=pr.get()
               b="sin(%d)"%a
               pr.set(b)
        except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def radtodeg():
        try:
           if(self.exp==0):
               a=pr.get().split(',')
               b=math.degrees(int(a[0]))
               pr1.set(b)
           else:
               a=pr.get()
               b="sin(%d)"%a
               pr.set(b)
        except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       
       
       
       bck1=Button(degree,text="Bck Sp",command=bck1,font=("Times New Roman",14,"bold","italic"),bg="#72c7ff",bd=4)
       delete=Button(Number,text="Del",command=del1,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       exp1=Button(Number,text="Expr",command=expr,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       eval1=Button(Number,text="Eval",command=eval,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="white",bd=4,state=DISABLED)      
       stor=Button(degree,text="Stor",command=store,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       
       but1=Button(Number,text=1,command=n1,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       but2=Button(Number,text=2,command=n2,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       but3=Button(Number,text=3,command=n3,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but4=Button(Number,text=4,command=n4,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but5=Button(Number,text=5,command=n5,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but6=Button(Number,text=6,command=n6,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but7=Button(Number,text=7,command=n7,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but8=Button(Number,text=8,command=n8,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but9=Button(Number,text=9,command=n9,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but0=Button(Number,text=0,command=n0,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butc=Button(Number,text=",",command=nc,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butf=Button(Number,text=".",command=nf,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
    
       butolb=Button(Entry1,text='(',command=rbrack,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butorb=Button(Entry1,text=')',command=lbrack,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butopw=Button(Entry1,text='^',command=pow1,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butodiv=Button(Entry1,text='/',command=divid,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butofldiv=Button(Entry1,text='//',command=floor,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butoce=Button(Entry1,text="c",command=ceil,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butomult=Button(Entry1,text='*',command=mult,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butopl=Button(Entry1,text='+',command=plus,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butosub=Button(Entry1,text='-',command=minus,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")

       butosin=Button(deg,text='sin',command=sin,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butocos=Button(deg,text='cos',command=cos,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butotan=Button(deg,text='tan',command=tan,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butocosec=Button(deg,text='cosec',command=cosec,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butosec=Button(deg,text='sec',command=sec,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butocot=Button(deg,text="cot",command=cot,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butosin1=Button(deg,text='sin^-1',command=sin1,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butocos1=Button(deg,text='cos^-1',command=cos1,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butotan1=Button(deg,text='tan^-1',command=tan1,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       degtorad=Button(deg,text='Deg >> Rad',command=degtorad,height=1,width=20,font=("Times New Roman",17,"bold","italic"),bd=4,bg="#fff9a8")
       radtodeg=Button(deg,text='Rad >> Deg',command=radtodeg,height=1,width=20,font=("Times New Roman",17,"bold","italic"),bd=4,bg="#fff9a8")
    
       degree.place(x=25,y=27)
       self.sb.place(x=1443,y=130,height=500)
       self.storage.place(x=1100,y=130)
       self.sb.config(command=self.storage.yview)
       deg.place(x=700,y=130)
       '''self.sb.place(x=1427,y=130,height=500)
self.storage.place(x=800,y=130)
 self.sb.config(command=self.storage.yview)'''


       
       T1.place(x=120,y=90,height=40,width=400)
       T2.place(x=700,y=90,height=40,width=670)
       bck1.place(x=510,y=90,height=40,width=70)
       delete.place(x=140,y=350)
       exp1.place(x=40,y=350)
       eval1.place(x=240,y=350)
       stor.place(x=1370,y=87)
    
       but1.place(x=40,y=30)
       but2.place(x=140,y=30)
       but3.place(x=240,y=30)
       but4.place(x=40,y=110)
       but5.place(x=140,y=110)
       but6.place(x=240,y=110)
       but7.place(x=40,y=190)
       but8.place(x=140,y=190)
       but9.place(x=240,y=190)
       but0.place(x=140,y=270)
       butc.place(x=40,y=270)
       butf.place(x=240,y=270)
                 
       butolb.place(x=40,y=430)
       butorb.place(x=140,y=430)
       butopw.place(x=350,y=430)
       butodiv.place(x=350,y=270)
       butofldiv.place(x=350,y=350)
       butoce.place(x=240,y=430)
       butomult.place(x=350,y=190)
       butopl.place(x=350,y=30)
       butosub.place(x=350,y=110)

       butosin.place(x=40,y=30)
       butocos.place(x=140,y=30)
       butotan.place(x=240,y=30)
       butocosec.place(x=40,y=110)
       butosec.place(x=140,y=110)
       butocot.place(x=240,y=110)
       butosin1.place(x=40,y=190)
       butocos1.place(x=140,y=190)
       butotan1.place(x=240,y=190)
       degtorad.place(x=40,y=260)
       radtodeg.place(x=40,y=330)
       

       Entry1.place(x=140,y=130)
       Number.place(x=140,y=130)
       border.place(x=120,y=130)

       

       
# 3 page                                                                                                                            3 page
   
   def logexstart(self):
           if(self.checklog==0):
             self.logex=Frame(self.calc,height=850,width=1495,bg="#eaf2fa")
             self.checklog+=1
             scien.Logex()
             
   def Logex(self):
      
       pr=StringVar()
       pr1=StringVar()
       global logex;
       logex=self.logex;
       border=Frame(logex,height=493,width=460,bg="#5162ff")
       Entry1=Frame(logex,height=473,width=420,bg="#2e9dff")
       Number=Frame(logex,height=430,width=350,bg="#7dbaf0")
       deg=Frame(logex,height=350,width=350,bg="#7dbaf0")
       T1=Entry(logex,text=pr,font=("Helvetica",18,"bold","italic"),bd=4,justify="left")
       T2=Entry(logex,text=pr1,font=("Times new roman",18,"bold","italic"),bd=4,justify="center")
       self.sb=Scrollbar(logex)
       self.storage=Listbox(logex,yscrollcommand=self.sb.set,font=("Helvetica",18,"bold","italic"),height=17,width=26)
       [self.storage.insert(END,i) for i in self.calcvalues]
       
       
       def n1():
                a=pr.get()
                b=str(a)+"1"
                pr.set(b)
       def n2():
               a=pr.get()
               b=str(a)+"2"
               pr.set(b)
       def n3():
              a=pr.get()
              b=str(a)+"3"
              pr.set(b)
       def n4():
              a=pr.get()
              b=str(a)+"4"
              pr.set(b)
       def n5():
              a=pr.get()
              b=str(a)+"5"
              pr.set(b)
       def n6():
              a=pr.get()
              b=str(a)+"6"
              pr.set(b)
       def n7():
              a=pr.get()
              b=str(a)+"7"
              pr.set(b)
       def n8():
              a=pr.get()
              b=str(a)+"8"
              pr.set(b)
       def n9():
              a=pr.get()
              b=str(a)+"9"
              pr.set(b)
       def n0():
              a=pr.get()
              b=str(a)+"0"
              pr.set(b)  
       def nc():
              a=pr.get()
              b=str(a)+","
              pr.set(b)
       def nf():
              a=pr.get()
              b=str(a)+"."
              pr.set(b)
  
       def bck1():
           a=pr.get()
           b=a[0:-1]
           pr.set(b)

       def del1():
          pr.set("")

       def expr():
           print("a")
           if(self.exp==0):
               self.exp+=1
               print("Expr Activated")
               exp1["bg"]="red"
               eval1["state"]=NORMAL
               eval1["bg"]="#fff9a8"
           elif(self.exp==1):
               self.exp-=1
               print("Expr deactivated")
               exp1["bg"]="#fff9a8"
               eval1["state"]=DISABLED
               eval1["bg"]="white"
       def eval():
         try:
          a=pr.get()
          b=scien.f(a)
          pr1.set(b)
         except Exception as e:
            print(e)
        
       def store():
            a=pr1.get()
            self.calcvalues.append(a)
            self.storage.insert(END,a) 
            
       def plus():
         try: 
           if(self.exp==0):
               b=0
               a=pr.get().split(',')
               for i in a:
                  b+=int(i)
               pr1.set(b)
           else:
               a=pr.get()
               print(a)
               b=a+"+"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def rbrack():
           a=pr.get()
           b=a+"("
           pr.set(b)
       def lbrack():
           a=pr.get()
           b=a+")"
           pr.set(b)
       def pow1():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=int(a[0])**int(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"^"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def divid():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=int(a[0])/int(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"/"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def mult():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=int(a[0])*int(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"*"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def minus():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=int(a[0])-int(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"+"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def ceil():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=float(a[0])/float(a[1])
               b=math.ceil(b)
               pr1.set(b)
           else:
               a=pr.get()
               b="math.ceil(%s)"%a
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def floor():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=int(a[0])//int(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"//"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def log10():
          try: 
           if(self.exp==0):
               a=pr.get().split(',')
               print(a)
               b=math.log10(float(a[0]))
               pr1.set(b)
           else:
               a=pr.get()
               b="math.log10(%d)"%float(a[0])
               pr.set(b)
          except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def loge():
          try: 
           if(self.exp==0):
               a=pr.get().split(',')
               print(a)
               b=math.log(float(a[0]))
               pr1.set(b)
           else:
               a=pr.get()
               b="math.log(%d)"%float(a[0])
               pr.set(b)
          except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def e():
          try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=math.exp(float(a[0]))
               pr1.set(b)
           else:
               a=pr.get()
               b="math.exp(%d)"%float(a)
               pr.set(b)
          except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def e1():
          try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=1/math.exp(float(a[0]))
               pr1.set(b)
           else:
               a=pr.get()
               b="1/math.exp(%d)"%float(a)
               pr.set(b)
          except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def ex():
          try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=math.log(float(a))
               pr1.set(b)
           else:
               a=pr.get()
               b="math.log(%d)"%int(a)
               pr.set(b)
          except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       
       bck1=Button(logex,text="Bck Sp",command=bck1,font=("Times New Roman",14,"bold","italic"),bg="#72c7ff",bd=4)
       delete=Button(Number,text="Del",command=del1,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       exp1=Button(Number,text="Expr",command=expr,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       eval1=Button(Number,text="Eval",command=eval,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="white",bd=4,state=DISABLED)      
       stor=Button(logex,text="Stor",command=store,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       
       but1=Button(Number,text=1,command=n1,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       but2=Button(Number,text=2,command=n2,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       but3=Button(Number,text=3,command=n3,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but4=Button(Number,text=4,command=n4,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but5=Button(Number,text=5,command=n5,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but6=Button(Number,text=6,command=n6,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but7=Button(Number,text=7,command=n7,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but8=Button(Number,text=8,command=n8,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but9=Button(Number,text=9,command=n9,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but0=Button(Number,text=0,command=n0,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butc=Button(Number,text=",",command=nc,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butf=Button(Number,text=".",command=nf,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
    
       butolb=Button(Entry1,text='(',command=rbrack,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butorb=Button(Entry1,text=')',command=lbrack,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butopw=Button(Entry1,text='^',command=pow1,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butodiv=Button(Entry1,text='/',command=divid,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butofldiv=Button(Entry1,text='//',command=floor,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butoce=Button(Entry1,text="c",command=ceil,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butomult=Button(Entry1,text='*',command=mult,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butopl=Button(Entry1,text='+',command=plus,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butosub=Button(Entry1,text='-',command=minus,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       
       
       butolog10=Button(deg,text='Loge()',command=log10,height=1,width=10,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butologe=Button(deg,text='Log10()',command=loge,height=1,width=10,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butoe=Button(deg,text='e^1',command=e,height=1,width=10,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butoe1=Button(deg,text='e^-1',command=e1,height=1,width=10,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butoex=Button(deg,text='e^x',command=ex,height=1,width=24,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       
       self.sb.place(x=1443,y=130,height=500)
       self.storage.place(x=1100,y=130)
       self.sb.config(command=self.storage.yview)
       deg.place(x=700,y=130)
       '''self.sb.place(x=1427,y=130,height=500)
self.storage.place(x=800,y=130)
 self.sb.config(command=self.storage.yview)'''


       
       T1.place(x=120,y=90,height=40,width=400)
       T2.place(x=700,y=90,height=40,width=670)
       bck1.place(x=510,y=90,height=40,width=70)
       delete.place(x=140,y=350)
       exp1.place(x=40,y=350)
       eval1.place(x=240,y=350)
       stor.place(x=1370,y=87)
    
       but1.place(x=40,y=30)
       but2.place(x=140,y=30)
       but3.place(x=240,y=30)
       but4.place(x=40,y=110)
       but5.place(x=140,y=110)
       but6.place(x=240,y=110)
       but7.place(x=40,y=190)
       but8.place(x=140,y=190)
       but9.place(x=240,y=190)
       but0.place(x=140,y=270)
       butc.place(x=40,y=270)
       butf.place(x=240,y=270)
                 
       butolb.place(x=40,y=430)
       butorb.place(x=140,y=430)
       butopw.place(x=350,y=430)
       butodiv.place(x=350,y=270)
       butofldiv.place(x=350,y=350)
       butoce.place(x=240,y=430)
       butomult.place(x=350,y=190)
       butopl.place(x=350,y=30)
       butosub.place(x=350,y=110)

       butolog10.place(x=40,y=30)
       butologe.place(x=190,y=30)
       butoe.place(x=40,y=110)
       butoe1.place(x=190,y=110)
       butoex.place(x=40,y=190)
       logex.place(x=25,y=27)

       Entry1.place(x=140,y=130)
       Number.place(x=140,y=130)
       border.place(x=120,y=130)

### 4 page                                                                                                         ################4
   def comstart(self):
           if(self.checklog==0):
             self.com=Frame(self.calc,height=850,width=1495,bg="#eaf2fa")
             self.checkcom+=1
             scien.com1()
             
   def com1(self):
      
       pr=StringVar()
       pr1=StringVar()
       global com;
       com=self.com;
       border=Frame(com,height=493,width=460,bg="#5162ff")
       Entry1=Frame(com,height=473,width=420,bg="#2e9dff")
       Number=Frame(com,height=430,width=350,bg="#7dbaf0")
       deg=Frame(com,height=350,width=350,bg="#7dbaf0")
       T1=Entry(com,text=pr,font=("Helvetica",18,"bold","italic"),bd=4,justify="left")
       T2=Entry(com,text=pr1,font=("Times new roman",18,"bold","italic"),bd=4,justify="center")
       self.sb=Scrollbar(com)
       self.storage=Listbox(com,yscrollcommand=self.sb.set,font=("Helvetica",18,"bold","italic"),height=17,width=26)
       [self.storage.insert(END,i) for i in self.calcvalues]
       
       
       def n1():
                a=pr.get()
                b=str(a)+"1"
                pr.set(b)
       def n2():
               a=pr.get()
               b=str(a)+"2"
               pr.set(b)
       def n3():
              a=pr.get()
              b=str(a)+"3"
              pr.set(b)
       def n4():
              a=pr.get()
              b=str(a)+"4"
              pr.set(b)
       def n5():
              a=pr.get()
              b=str(a)+"5"
              pr.set(b)
       def n6():
              a=pr.get()
              b=str(a)+"6"
              pr.set(b)
       def n7():
              a=pr.get()
              b=str(a)+"7"
              pr.set(b)
       def n8():
              a=pr.get()
              b=str(a)+"8"
              pr.set(b)
       def n9():
              a=pr.get()
              b=str(a)+"9"
              pr.set(b)
       def n0():
              a=pr.get()
              b=str(a)+"0"
              pr.set(b)  
       def nc():
              a=pr.get()
              b=str(a)+","
              pr.set(b)
       def nf():
              a=pr.get()
              b=str(a)+"."
              pr.set(b)
  
       def bck1():
           a=pr.get()
           b=a[0:-1]
           pr.set(b)

       def del1():
          pr.set("")

       def expr():
           print("a")
           if(self.exp==0):
               self.exp+=1
               print("Expr Activated")
               exp1["bg"]="red"
               eval1["state"]=NORMAL
               eval1["bg"]="#fff9a8"
           elif(self.exp==1):
               self.exp-=1
               print("Expr deactivated")
               exp1["bg"]="#fff9a8"
               eval1["state"]=DISABLED
               eval1["bg"]="white"
       def eval():
         try:
          a=pr.get()
          b=scien.f(a)
          pr1.set(b)
         except Exception as e:
            print(e)
        
       def store():
            a=pr1.get()
            self.calcvalues.append(a)
            self.storage.insert(END,a) 
            
       def plus():
         try: 
           if(self.exp==0):
               b=0
               a=pr.get().split(',')
               for i in a:
                  b+=int(i)
               pr1.set(b)
           else:
               a=pr.get()
               print(a)
               b=a+"+"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def rbrack():
           a=pr.get()
           b=a+"("
           pr.set(b)
       def lbrack():
           a=pr.get()
           b=a+")"
           pr.set(b)
       def pow1():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=int(a[0])**int(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"^"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def divid():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=int(a[0])/int(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"/"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def mult():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=int(a[0])*int(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"*"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def minus():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=int(a[0])-int(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"+"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def ceil():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=float(a[0])/float(a[1])
               b=math.ceil(b)
               pr1.set(b)
           else:
               a=pr.get()
               b="math.ceil(%s)"%a
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def floor():
         try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=int(a[0])//int(a[1])
               pr1.set(b)
           else:
               a=pr.get()
               b=a+"//"
               pr.set(b)
         except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def log10():
          try: 
           if(self.exp==0):
               a=pr.get().split(',')
               print(a)
               b=math.log10(float(a[0]))
               pr1.set(b)
           else:
               a=pr.get()
               b="math.log10(%d)"%float(a[0])
               pr.set(b)
          except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def loge():
          try: 
           if(self.exp==0):
               a=pr.get().split(',')
               print(a)
               b=math.log(float(a[0]))
               pr1.set(b)
           else:
               a=pr.get()
               b="math.log(%d)"%float(a[0])
               pr.set(b)
          except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def e():
          try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=math.exp(float(a[0]))
               pr1.set(b)
           else:
               a=pr.get()
               b="math.exp(%d)"%float(a)
               pr.set(b)
          except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def e1():
          try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=1/math.exp(float(a[0]))
               pr1.set(b)
           else:
               a=pr.get()
               b="1/math.exp(%d)"%float(a)
               pr.set(b)
          except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       def ex():
          try: 
           if(self.exp==0):
               a=pr.get().split(',')
               b=math.log(float(a))
               pr1.set(b)
           else:
               a=pr.get()
               b="math.log(%d)"%int(a)
               pr.set(b)
          except Exception as e:
             print(e)
             pr1.set("Invalid Input")
       
       bck1=Button(com,text="Bck Sp",command=bck1,font=("Times New Roman",14,"bold","italic"),bg="#72c7ff",bd=4)
       delete=Button(Number,text="Del",command=del1,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       exp1=Button(Number,text="Expr",command=expr,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       eval1=Button(Number,text="Eval",command=eval,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="white",bd=4,state=DISABLED)      
       stor=Button(com,text="Stor",command=store,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       
       but1=Button(Number,text=1,command=n1,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       but2=Button(Number,text=2,command=n2,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bg="#fff9a8",bd=4)
       but3=Button(Number,text=3,command=n3,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but4=Button(Number,text=4,command=n4,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but5=Button(Number,text=5,command=n5,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but6=Button(Number,text=6,command=n6,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but7=Button(Number,text=7,command=n7,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but8=Button(Number,text=8,command=n8,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but9=Button(Number,text=9,command=n9,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       but0=Button(Number,text=0,command=n0,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butc=Button(Number,text=",",command=nc,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butf=Button(Number,text=".",command=nf,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
    
       butolb=Button(Entry1,text='(',command=rbrack,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butorb=Button(Entry1,text=')',command=lbrack,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butopw=Button(Entry1,text='^',command=pow1,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butodiv=Button(Entry1,text='/',command=divid,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butofldiv=Button(Entry1,text='//',command=floor,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butoce=Button(Entry1,text="c",command=ceil,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butomult=Button(Entry1,text='*',command=mult,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butopl=Button(Entry1,text='+',command=plus,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       butosub=Button(Entry1,text='-',command=minus,height=1,width=5,font=("Times New Roman",14,"bold","italic"),bd=4,bg="#fff9a8")
       
       self.sb.place(x=1443,y=130,height=500)
       self.storage.place(x=1100,y=130)
       self.sb.config(command=self.storage.yview)
       deg.place(x=700,y=130)
       '''self.sb.place(x=1427,y=130,height=500)
self.storage.place(x=800,y=130)
 self.sb.config(command=self.storage.yview)'''


       
       T1.place(x=120,y=90,height=40,width=400)
       T2.place(x=700,y=90,height=40,width=670)
       bck1.place(x=510,y=90,height=40,width=70)
       delete.place(x=140,y=350)
       exp1.place(x=40,y=350)
       eval1.place(x=240,y=350)
       stor.place(x=1370,y=87)
    
       but1.place(x=40,y=30)
       but2.place(x=140,y=30)
       but3.place(x=240,y=30)
       but4.place(x=40,y=110)
       but5.place(x=140,y=110)
       but6.place(x=240,y=110)
       but7.place(x=40,y=190)
       but8.place(x=140,y=190)
       but9.place(x=240,y=190)
       but0.place(x=140,y=270)
       butc.place(x=40,y=270)
       butf.place(x=240,y=270)
                 
       butolb.place(x=40,y=430)
       butorb.place(x=140,y=430)
       butopw.place(x=350,y=430)
       butodiv.place(x=350,y=270)
       butofldiv.place(x=350,y=350)
       butoce.place(x=240,y=430)
       butomult.place(x=350,y=190)
       butopl.place(x=350,y=30)
       butosub.place(x=350,y=110)

       com.place(x=25,y=27)

       Entry1.place(x=140,y=130)
       Number.place(x=140,y=130)
       border.place(x=120,y=130)
                 

   def closebas(self):
       try:
          if(self.checkbas==1):
           print("basicclose")
           basic.destroy()
           self.checkbas-=1
         #  self.calcvalues=[]
       except Exception as e:
           print(e)
       print(self.calcvalues)
       
   def closedeg(self):
       try:
          if(self.checkdeg==1):
           print("deg close")
           degree.destroy()
           self.checkdeg-=1
         #  self.calcvalues=[]
       except Exception as e:
           print(e)
       print(self.calcvalues)

   def closelogex(self):
       try:
          if(self.checklog==1):
           print("log close")
           logex.destroy()
           self.checklog-=1
         #  self.calcvalues=[]
       except Exception as e:
           print(e)
       print(self.calcvalues)
   def closecom(self):
       try:
          if(self.checkcom==1):
           print("log close")
           com.destroy()
           self.checkcom-=1
         #  self.calcvalues=[]
       except Exception as e:
           print(e)
       print(self.calcvalues)
       
       
   def start(self):
      
      head=Label(self.calc,text="Scientific Calculator:",font=("Times new roman",75,"bold","italic"),fg="#7aff52",bg="#032906",bd=4).place(x=325,y=120)
      contents=Label(self.calc,text="Contents:",font=("Times new roman",50,"bold","italic"),fg="#7aff52",bg="#032906",bd=4).place(x=200,y=270)
      
      c1=Label(self.calc,text="1. Basic Arithmetic Operations.",font=("Times new roman",30,"bold","italic"),fg="#7aff52",bg="#032906",bd=4).place(x=460,y=370)
      c2=Label(self.calc,text="2. Degree and Radian Operations.",font=("Times new roman",30,"bold","italic"),fg="#7aff52",bg="#032906",bd=4).place(x=460,y=450)
      c3=Label(self.calc,text="3. Logarithmic and Exponential Opearations.",font=("Times new roman",30,"bold","italic"),fg="#7aff52",bg="#032906",bd=4).place(x=460,y=530)
      c4=Label(self.calc,text="4. Commonly used Mathematical Operations.",font=("Times new roman",30,"bold","italic"),fg="#7aff52",bg="#032906",bd=4).place(x=460,y=610)
      
      bass=Button(self.calc,text="Basic Ops",command=scien.basicstart,font=("Helvetica",10,"bold","italic"),width=30,height=1,fg="#20ff6d",bg="#424242").place(x=0,y=0)
      basc=Button(self.calc,text="bas",command=scien.closebas,font=("Helvetica",10,"bold","italic"),width=5,height=1,bg="#032906",fg="#20ff6d").place(x=250,y=0)
      
      degc=Button(self.calc,text="Degree Ops",font=("Helvetica",10,"bold","italic"),width=30,height=1,command=scien.degreestart,bg="#424242",fg="#00baff").place(x=300,y=0)
      degs=Button(self.calc,text="Deg",command=scien.closedeg,font=("Helvetica",10,"bold","italic"),width=5,height=1,bg="#032906",fg="#00baff").place(x=550,y=0)
      
      logs=Button(self.calc,text="Logex Ops",command=scien.logexstart,font=("Helvetica",10,"bold","italic"),width=30,height=1,bg="#424242",fg="#ff0000").place(x=600,y=0)
      logc=Button(self.calc,text="Logex",command=scien.closelogex,font=("Helvetica",10,"bold","italic"),width=5,height=1,bg="#032906",fg="#ff0000").place(x=850,y=0)
      
      coms=Button(self.calc,text="Common Ops",command=scien.comstart,font=("Helvetica",10,"bold","italic"),width=30,height=1,bg="#424242",fg="#e8ff67").place(x=900,y=0)
      comc=Button(self.calc,text="Com",command=scien.closecom,font=("Helvetica",10,"bold","italic"),width=5,height=1,bg="#032906",fg="#e8ff67").place(x=1150,y=0)

      totclose=Button(self.calc,text="Close",command=scien.closelogex,font=("Helvetica",10,"bold","italic"),width=5,height=1,bg="#032906",fg="#ff0000").place(x=1250,y=0)
      
      self.calc.mainloop()
##main: f0000
x="7+9"
scien=Scientific_Calculator()
scien.start()

